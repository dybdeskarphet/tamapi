openapi: 3.0.0
info:
  title: Tamapi
  description: Tamagotchi inspired virtual pet API.
  version: 1.0.0

paths:
  /:
    get:
      summary: "API root endpoint"
      description: "Returns a simple welcome message."
      responses:
        "200":
          description: "Successful response"
          content:
            text/plain:
              schema:
                type: string
                example: "Say hello to Tamapi"

  /auth:
    get:
      summary: "Root of auth route"
      description: "Calling this endpoint does nothing and returns a message."
      responses:
        "201":
          description: "Successful response"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Calling root does nothing in auth route."
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal server error."

  /auth/register:
    post:
      summary: Register a new user
      description: Creates a new user account.
      operationId: postAuthRegister
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - name
                - username
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                name:
                  type: string
                  example: "John Doe"
                username:
                  type: string
                  example: "johndoe"
                password:
                  type: string
                  format: password
                  example: "strongpassword123!"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registered successfully"
        "409":
          description: User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User already exists"
        "500":
          description: Internal server error

  /auth/login:
    post:
      summary: Login a user
      description: Authenticates a user and returns a JWT token.
      operationId: postAuthLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "strongpassword123!"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsIn..."
                  message:
                    type: string
                    example: "Login successful"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid credentials."
        "500":
          description: Internal server error
  /auth/dev-login:
    post:
      summary: Generate a developer login token
      description: Endpoint to generate a token for developers only in the development environment.
      operationId: generateDevLoginToken
      responses:
        "200":
          description: Successfully generated a developer login token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: The generated JWT token for the developer.
                  message:
                    type: string
                    example: "Good luck."
        "403":
          description: Forbidden - This route is restricted to the development environment only.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Forbidden"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal server error"
      security: []
  /pets:
    get:
      summary: Get pets of the authenticated user
      description: Retrieves a list of pets associated with the authenticated user.
      operationId: getPets
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved the list of pets.
          content:
            application/json:
              schema:
                type: object
                properties:
                  pets:
                    type: array
                    items:
                      $ref: "#/components/schemas/Pet"
                  message:
                    type: string
                    example: "Pets listed successfully."
        "404":
          description: User not found or no pets found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No pets found."
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal server error."

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Pet:
      type: object
      properties:
        id:
          type: string
          example: "60d0fe4f5311236168a109ca"
        name:
          type: string
          example: "Buddy"
        type:
          type: string
          enum: [Cat, Dog, Rabbit, Wolf, Alien]
          example: "Dog"
        age:
          type: integer
          example: 3
        health:
          type: integer
          example: 80
        happiness:
          type: integer
          example: 90
        hunger:
          type: integer
          example: 20
        energy:
          type: integer
          example: 70
        hygiene:
          type: integer
          example: 60
        owner:
          type: string
          description: The ID of the user who owns the pet.
          example: "60d0fe4f5311236168a109cb"
